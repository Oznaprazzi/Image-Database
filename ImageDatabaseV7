#-------------------------------------------------------------------------------
# Name:        Image Assessment
# Purpose:     captures information of images then converts to CSV file
#
# Author:      huangc
#
# Created:     23/07/2014
# Copyright:   (c) huangc 2014
# Licence:     CCL
#-------------------------------------------------------------------------------
#!/usr/bin/env python
#import GUI library
import os.path
from tkinter import *

#for Python V3 you must explicitly load the message box
import tkinter.messagebox

class Image:
    def __init__(self, image_id, image_filename, image_title, image_owner_fn, image_owner_ln, image_licence_type):
        self.image_title = image_title
        self.image_owner_fn = image_owner_fn
        self.image_owner_ln = image_owner_ln
        self.image_id = image_id
        self.image_filename = image_filename
        self.image_licence_type = image_licence_type

    def get_image_id(self):
        return self.image_id

    def get_image_filename(self):
        return self.image_filename

    def get_image_title(self):
        return self.image_title

    def get_image_owner_fn(self):
        return self.image_owner_fn

    def get_image_owner_ln(self):
        return self.image_owner_ln

    def get_image_licence_type(self):
        return self.image_licence_type

class GUI:

    def __init__(self):

        # similar to root in other texts
        window = Tk()
        window.title("Data Entry For Images Data")
        #setting root window and size
        window.minsize(width=750, height=510)
        window.configure(background='#B8FFB8')

        heading_label = Label(window, bg="black", fg="#B8FFB8", text="Images Data", font=("Footlight MT Light","24"), pady=20)
        heading_label.grid(row=0, columnspan=2, sticky=W+E)

        #INITIALIZATION VARIABLES
        #this variable stores whether the data has been validated or not
        self.ready_to_write = False
        #this will contain the list of all books entered via the GUI
        self.recordlist = []

        #creating label and field variable in GUI for each entry field
        image_title_label = Label(window, text='Image Title:', font=("Century","12"), bg="#B8FFB8", pady=15)
        image_title_label.grid(row=1, sticky=E)
        self.image_title_field = Entry(window, width=25)
        self.image_title_field.grid(row=1, column=1, sticky=W)

        image_owner_fn_label = Label(window, text='Image Owner\'s First Name:', font=("Century","12"), bg="#B8FFB8")
        image_owner_fn_label.grid(row=2, sticky=E)
        self.image_owner_fn_field = Entry(window, width=25)
        self.image_owner_fn_field.grid(row=2, column=1, sticky=W)

        image_owner_ln_label = Label(window, text='Image Owner\'s Of Image Last Name:', font=("Century","12"), bg="#B8FFB8", pady=15)
        image_owner_ln_label.grid(row=3, sticky=E)
        self.image_owner_ln_field = Entry(window, width=25)
        self.image_owner_ln_field.grid(row=3, column=1, sticky=W)

        image_id_label = Label(window, text='Image ID (Please enter at least 3 numeric values):', font=("Century","12"), bg="#B8FFB8", pady=15)
        image_id_label.grid(row=4, sticky=E)
        self.image_id_field = Entry(window, width=25)
        self.image_id_field.grid(row=4, column=1, sticky=W)

        image_filename_label = Label(window, text='Image Filename (including file extension):', font=("Century","12"), bg="#B8FFB8")
        image_filename_label.grid(row=5, sticky=E)
        self.image_filename_field = Entry(window, width=25)
        self.image_filename_field.grid(row=5, column=1, sticky=W)

        image_licence_type_label = Label(window, text='Select Image Licence Type:', font=("Century","12"), bg="#B8FFB8", pady=15)
        image_licence_type_label.grid(row=6, sticky=E)
        self.image_licence_type_field = StringVar()
        om = OptionMenu(window, self.image_licence_type_field, "Attribuution (BY)", "Share-Alike (SA)", "Non-Commercial (NC)", "No Derivative Works (ND)", "Non-Commercial - Share-Alike (NC-SA)", "Non-Commercial - No Derivative Works (NC-ND)") #Option Menu that allows user to select one of six of the image licence type - users may not know which licence type to write or may input something unacceptable, so I chose to create the OptionMenu function
        #Set background color of button
        om.config(bg="#D7FFD7", width=40) #set width to 40 so that the longer string lengths can be seen
        # Set background colour of drop down menu
        om["menu"].config(bg="#D7FFD7")
        om.grid(row=6, column=1)

        #label for csv file create or append
        csvfile_label = Label(window, text='Do you want to create a new csv file? (Please enter "yes" or "no")', font=("Century","12"), bg="#B8FFB8")
        csvfile_label.grid(row=7, sticky=E)
        self.csvfile_field = Entry(window, width=25)
        self.csvfile_field.grid(row=7, column=1, sticky=W)

        #creates a button. The command function is run when the button is pressed
        #the 'command=self.doSubmit' is an example of a call-back method
        submit_button_label = Label(window, text='Press To Validate:', font=("Century","12"), bg="#B8FFB8", pady=15)
        submit_button = Button(window, text='Submit', command=self.doSubmit, font=("Century","10"), bg="#D7FFD7", width=15)

        csv_button_label = Label(window, text='Convert Record To CSV:', font=("Century","12"), bg="#B8FFB8")
        csv_button = Button(window, text='Write To CSV', command=self.writetocsv, font=("Century","10"), bg="#D7FFD7", width=15)
        submit_button_label.grid(row=8, sticky=E)
        submit_button.grid(row=8, column=1, sticky=W)
        csv_button_label.grid(row=9, sticky=E)
        csv_button.grid(row=9, column=1, sticky=W)

        #waiting for user input - event driven program
        window.mainloop()

    def doSubmit(self):

        #tests uniqueness of each image ID the user inputs

        self.noduplicate = True;
        if self.csvfile_field.get() == "no":
            for record in self.recordlist:
                if self.image_id_field.get() == record.get_image_id():
                    self.noduplicate = False
                    tkinter.messagebox.showwarning('Warning!','Duplicate Image ID.');
                    print('Please enter Image ID again.');
            self.ready_to_write = False

        if self.noduplicate == True:

            self.filenames = [self.image_filename_field.get()] #creates list of all image filenames entered so that the next code below is able to splits up the extension from the filename

            for fn in self.filenames:
            # Splits the extension from the path and normalise it to lowercase, so the file extension can be validated.
                ext = os.path.splitext(fn)[-1].lower()
                fn = os.path.splitext(fn)[-2]

        #this is the call-back method for the 'Submit' button
            if len(self.image_id_field.get()) <1 or len(self.image_filename_field.get()) <1 or len(self.image_title_field.get()) <1 or len(self.image_owner_fn_field.get()) <1 or len(self.image_owner_ln_field.get()) <1 or len(self.image_licence_type_field.get()) <1 or len(self.csvfile_field.get()) <1:
                tkinter.messagebox.showwarning('Warning!','Please enter a value for all fields.')
            elif len(self.image_id_field.get()) < 3:
                tkinter.messagebox.showwarning('Warning!','Please enter at least 3 numeric values for image ID.')
            #limits the user's input to 25 characters for image filename, image title and image owner
            elif len(fn) > 25 or len(self.image_title_field.get()) > 25  or len(self.image_owner_fn_field.get()) > 25 or len(self.image_owner_ln_field.get()) > 25:
                tkinter.messagebox.showwarning('Warning!','Please enter less than 25 characters for image filename, image title and image owner\'s first name and image owner\'s last name.')

            #only accepts the most common image file extensions so that it is more easy to validate as users may input unacceptable image file extensions such as ".fjgl" or ".323j" etc.
            elif ext not in (".bmp", ".gif", ".jpg", ".png", ".psd", ".pspimage", ".thm", ".tif", ".yuv", ".ai", ".drw", ".eps", ".ps", ".svg", ".jpeg"):
                tkinter.messagebox.showwarning('Warning!','Please enter a proper/acceptable image file extension.')
            #does not allow the user to input "." in the filename unless it is the file extension.
            elif fn.find('.') != -1:
                tkinter.messagebox.showwarning('Warning!','Please do not input "." into filename unless it is the file extension.')
            #validates the input of self.csvfile_field - needs to be either "yes" or "no" in order to create or append .txt file
            elif self.csvfile_field.get() not in ("yes", "no"):
                tkinter.messagebox.showwarning('Warning!','Please enter "yes" or "no" for csv file creation.')

            elif self.image_licence_type_field.get() == "Please select Image Licence Type:":
                tkinter.messagebox.showwarning('Warning!','Please select Image Licence Type.')

            else:
                try:
                    validated_image_id = int(self.image_id_field.get())

                    self.recordlist.append(Image(self.image_id_field.get(), self.image_filename_field.get(), self.image_title_field.get() , self.image_owner_fn_field.get(), self.image_owner_ln_field.get(), self.image_licence_type_field.get()))
                    self.ready_to_write = True
                    self.csvfile = self.csvfile_field.get() #stores the self.csvfile_field.get() data before it is deleted
                    tkinter.messagebox.showinfo('Notice','Submission Successful.')

                    self.image_id_field.delete(0, END) #command to clear field
                    self.image_filename_field.delete(0, END)
                    self.image_title_field.delete(0, END)
                    self.image_owner_fn_field.delete(0, END)
                    self.image_owner_ln_field.delete(0, END)
                    self.csvfile_field.delete(0, END)
                    self.image_licence_type_field.set("Please select Image Licence Type:")

                except ValueError:
                    tkinter.messagebox.showwarning('Warning!','Please enter numeric image ID.')
                    print('Please enter numeric image ID.')

    def writetocsv(self):
        #this is the call-back method for the 'write to csv' button
        import csv
        file_name = 'image_database.txt'

        if self.ready_to_write: #checks data has been previously validated
            self.ready_to_write = True
            if self.csvfile == "no":
                if os.path.isfile('image_database.txt'):#checks if file name exists
                    ofile = open(file_name, 'a') #adds data to file if file exists
                else:
                    ofile = open(file_name, 'w') #creates file if file does not existsofile = open(file_name, 'a') #adds data to file if file exists
            elif self.csvfile == "yes":
                ofile = open(file_name, 'w')#creates file if user's input for csvfile_field is "yes"

            writer = csv.writer(ofile, delimiter=',')
            #cycles through list of records created by GUI
            if self.noduplicate == True: #only writes record if there is no duplicate
                for record in self.recordlist:
                    print(record.get_image_id())
                    writer.writerow([record.get_image_title(), record.get_image_owner_fn(), record.get_image_owner_ln(), record.get_image_id(), record.get_image_filename(), record.get_image_licence_type()])
            #explicitly closes the output file
            ofile.close()
        else:
            tkinter.messagebox.showwarning('Error!', 'You need to Validate your data')

        #only shows when data has been validated
        if self.ready_to_write and self.csvfile == "yes":
            tkinter.messagebox.showinfo('Notice',file_name+' File Generated Successfully!') #shows message if the user wants to create a new file
        elif self.ready_to_write and self.csvfile == "no":
            tkinter.messagebox.showinfo('Notice', 'Data added to '+file_name+' Successfully!') #shows message if the user does not want to create a new file but add the data to the existing file


#initialises the programme
GUI()
