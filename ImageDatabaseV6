#-------------------------------------------------------------------------------
# Name:        Image Assessment
# Purpose:     capture information of images
#
# Author:      huangc
#
# Created:     23/07/2014
# Copyright:   (c) huangc 2014
# Licence:     CCL
#-------------------------------------------------------------------------------
#!/usr/bin/env python
#import GUI library
import os
import os.path
from tkinter import *

#for Python V3 you must explicitely load the messagebox
import tkinter.messagebox

class Image:
    def __init__(self, image_id, image_filename, image_title, image_owner, image_licence_type):
        self.image_title = image_title
        self.image_owner = image_owner
        self.image_id = image_id
        self.image_filename = image_filename
        self.image_licence_type = image_licence_type

    def get_image_id(self):
        return self.image_id

    def get_image_filename(self):
        return self.image_filename

    def get_image_title(self):
        return self.image_title

    def get_image_owner(self):
        return self.image_owner

    def get_image_licence_type(self):
        return self.image_licence_type

class GUI:

    def __init__(self):

        # similar to root in other texts
        window = Tk()
        window.title("Data Entry For Images Data")
        #setting root window and size
        window.minsize(width=720, height=400)
        window.configure(background='#B8FFB8')

        heading_label = Label(window, bg="black", fg="#B8FFB8", text="Images Data", font=("Footlight MT Light","24"), pady=20)
        heading_label.grid(row=0, columnspan=2, sticky=W+E)

        #INITIALIZATION VARIABLES
        #this variable stores whether the data has been validated or not
        self.ready_to_write = False
        #this will contain the list of all books entered via the gui
        self.recordlist = []


        #creating label and field variable in GUI for each entry field
        image_title_label = Label(window, text='Image Title:', font=("Century","12"), bg="#B8FFB8", pady=15)
        image_title_label.grid(row=1, sticky=E)
        self.image_title_field = Entry(window, width=25)
        self.image_title_field.grid(row=1, column=1, padx=15)

        image_owner_label = Label(window, text='Owner Of Image:', font=("Century","12"), bg="#B8FFB8")
        image_owner_label.grid(row=2, sticky=E)
        self.image_owner_field = Entry(window, width=25)
        self.image_owner_field.grid(row=2, column=1)

        image_id_label = Label(window, text='Image ID (Please enter at least 3 numberic values):', font=("Century","12"), bg="#B8FFB8", pady=15)
        image_id_label.grid(row=3, sticky=E)
        self.image_id_field = Entry(window, width=25)
        self.image_id_field.grid(row=3, column=1)

        image_filename_label = Label(window, text='Image Filename (including file extension):', font=("Century","12"), bg="#B8FFB8")
        image_filename_label.grid(row=4, sticky=E)
        self.image_filename_field = Entry(window, width=25)
        self.image_filename_field.grid(row=4, column=1)


        image_licence_type_label = Label(window, text='Select Image Licence Type:', font=("Century","12"), bg="#B8FFB8", pady=15)
        image_licence_type_label.grid(row=5, sticky=E)
        self.image_licence_type_field = StringVar()
        om = OptionMenu(window, self.image_licence_type_field, "Attribuution (BY)", "Share-Alike (SA)", "Non-Commercial (NC)", "No Derivative Works (ND)", "Non-Commercial - Share-Alike (NC-SA)", "Non-Commercial - No Derivative Works (NC-ND)")
        om.config(bg="#D7FFD7", width=19)  # Set background color of button
        # Set background colour of drop down menu
        om["menu"].config(bg="#D7FFD7")
        om.grid(row=5, column=1)

        #creates a button. The command function is run when the button is pressed
        #the 'command=self.doSubmit' is an example of a callback method
        submit_button_label = Label(window, text='Press To Validate:', font=("Century","12"), bg="#B8FFB8")
        submit_button = Button(window, text='Submit', command=self.doSubmit, font=("Century","10"), bg="#D7FFD7", width=15)

        csv_button_label = Label(window, text='Convert Record To CSV:', font=("Century","12"), bg="#B8FFB8", pady=15)
        csv_button = Button(window, text='Write To CSV', command=self.writetocsv, font=("Century","10"), bg="#D7FFD7", width=15)
        submit_button_label.grid(row=6, sticky=E)
        submit_button.grid(row=6, column=1)
        csv_button_label.grid(row=7, sticky=E)
        csv_button.grid(row=7, column=1)

        #waiting for user input - event driven program
        window.mainloop()

    def doSubmit(self):

        #test uniqueness of each school name entered u

        noduplicate = True;
        for record in self.recordlist:
            if self.image_id_field.get() == record.get_image_id():
                noduplicate= False
                tkinter.messagebox.showwarning('Warning!','Duplicate Image ID.');
                print('Please enter Image ID again.');

        if noduplicate == True:
        #this is the callback method for the 'Submit' button
            if len(self.image_id_field.get()) <1 or len(self.image_filename_field.get()) <1 or len(self.image_title_field.get()) <1 or len(self.image_owner_field.get()) <1 or len(self.image_licence_type_field.get()) <1:
                tkinter.messagebox.showwarning('Warning!','Please enter a value for all fields.')
            elif len(self.image_id_field.get()) < 3:
                tkinter.messagebox.showwarning('Warning!','Please enter at least 3 numberic values for image ID.')

            self.filenames = [self.image_filename_field.get()]

            for fn in self.filenames:
            # Splits the extension from the path and normalise it to lowercase.
                ext = os.path.splitext(fn)[-1].lower()

            if ext not in (".bmp", ".gif", ".jpg", ".png", ".psd", ".pspimage", ".thm", ".tif", ".yuv", ".ai", ".drw", ".eps", ".ps", ".svg", ".jpeg"):
                tkinter.messagebox.showwarning('Warning!','Please enter a proper/acceptable image file extension.')

            else:
                try:
                    validated_image_id = int(self.image_id_field.get())

                    self.recordlist.append(Image(self.image_id_field.get(), self.image_filename_field.get(), self.image_title_field.get() , self.image_owner_field.get(), self.image_licence_type_field.get()))
                    self.ready_to_write = True
                    tkinter.messagebox.showinfo('Notice','Submission Sucessful.')

                    self.image_id_field.delete(0, END) #command to clear field
                    self.image_filename_field.delete(0, END)
                    self.image_title_field.delete(0, END)
                    self.image_owner_field.delete(0, END)

                except ValueError:
                    tkinter.messagebox.showwarning('Warning!','Please enter numeric image ID.')
                    print('Please enter numeric image ID.')

    def writetocsv(self):
        #this is the callback method for the 'write to csv' button
        import csv
        file_name = 'image_database.txt'

        if self.ready_to_write == True: #cheacks data has been previously validated
            if os.path.isfile('image_database.txt'):#checks if file name exists
                ofile = open(file_name, 'a') #adds data to file if file exists
            else:
                ofile = open(file_name, 'w') #creates file if file does not exists

            writer = csv.writer(ofile, delimiter=',')
            #cycles through list of records created by gui
            for record in self.recordlist:
                print(record.get_image_id())
                writer.writerow([record.get_image_title(), record.get_image_owner(), record.get_image_id(), record.get_image_filename(), record.get_image_licence_type()])
            #explicitly closes the output file
            ofile.close()

        else:
            tkinter.messagebox.showwarning('Error!', 'You need to Validate your data')

        if self.ready_to_write == True:
            tkinter.messagebox.showinfo('Notice',file_name+' File Generated Sucessfully!')

#initialises the programme
GUI()
